/**
 * @file mainpage.dox
 *
 * @mainpage
 *
 * @section sec_intro Introduction
 * The following project was created to allow easy motor control. Two classes
 * were developed to allow for easy interaction with the motor. The MotorDriver
 * class allows a user to spin the motor in a given direction with a given duty
 * cycle. The Encoder class allows a user to collect data about the motor's
 * position, potentially to make decisions about motor control.
 *
 * @section sec_mot Motor Driver
 *
 * @subsection purpose Purpose
 * The MotorDriver class implements a motor driver for the ME405 board. At any
 * point while the motor is running, the user can use this class to modify the
 * duty cycle of the signal and the motor will react appropriately.
 *
 * @subsection usage Usage
 * A MotorDriver object is constructed without parameters. The duty cycle is
 * initially set to 0. The duty cycle can then be mofified by calling the
 * set_duty_cycle() function, passing the desired duty cycle as a parameter.
 *
 * @subsection testing Testing
 * The MotorDriver class was tested manually with a physical motor. The
 * set_duty_cycle function was called with different duty cycles, and the
 * motor's speed and direction were qualitatively checked.
 *
 * @section sec_enc Encoder
 *
 * @subsection purpose Purpose
 * The Encoder class enables the user to implement multiple encoders without
 * needing to rewrite code for each one. All encoders can run and be read from
 * independently. All encoders can be zeroed independently.
 *
 * @subsection usage Usage
 * An Encoder object is constructed by providing the pin objects, timer ID, and
 * timer channels corresponding to the pins to which the physical encoder is
 * attached. Best results occur when the read() function is called often. The
 * encoder can be zeroed at any position chosen by the user. Please see
 * encoder.Encoder which is part of the \ref encoder package.
 * 
 * @subsection testing Testing
 * The Encoder class was tested manually with a physical encoder. The read()
 * function was called at a high frequency (100 Hz).
 * 
 * @subsection bugs_and_limitations Bugs and Limitations
 * The Encoder class handles timer counter underflow/overflow correctly only
 * when the read() function is called at a high enough frequency, determined as
 * a function of the speed at which the motor spins. Best results are produced
 * when the read() function is called as frequently as reasonable.
 *
 * @section location Location
 * https://github.com/rahul-go/Mechatronics-LAB/tree/master/Lab%201
 *
 * @author Rahul Goyal, Cameron Kao, Harry Whinnery
 *
 * @copyright License Info
 *
 * @date January 24, 2019
 */